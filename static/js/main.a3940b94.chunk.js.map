{"version":3,"sources":["utils/API.js","components/Container/index.js","components/Row/index.js","components/Col/index.js","components/Searchbar/index.js","pages/Home.js","components/Header/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","Container","props","className","fluid","Row","Col","size","split","map","join","Searchbar","search","handleInputChange","findEmployee","value","onChange","name","type","placeholder","id","onClick","e","preventDefault","Home","state","Employees","filteredEmployees","sortOrder","error","console","log","target","setState","emp","filter","employee","toLowerCase","charAt","toUpperCase","slice","first","sortName","nameOrder","order","sort","a","b","last","API","then","employees","data","results","style","minHeight","this","onClikc","thisEmp","index","key","src","picture","medium","alt","phone","email","moment","dob","date","format","Component","Header","Wrapper","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"8TAEe,EACG,WACV,OAAOA,IAAMC,IAAI,kDCEVC,MAJf,SAAmBC,GACf,OAAO,uCAAKC,UAAS,mBAAcD,EAAME,MAAQ,SAAW,KAAUF,KCG3DG,MAJf,SAAaH,GACT,OAAO,uCAAKC,UAAS,aAAQD,EAAME,MAAQ,SAAW,KAAUF,KCIrDI,MALf,SAAaJ,GACT,IAAMK,EAAOL,EAAMK,KAAKC,MAAM,KAAKC,KAAI,SAAAF,GAAI,MAAI,OAASA,KAAMG,KAAK,KACnE,OAAO,uCAAKP,UAAWI,GAAUL,K,MC4BtBS,MA7Bf,SAAmBT,GAAQ,IACfU,EAA4CV,EAA5CU,OAAQC,EAAoCX,EAApCW,kBAAmBC,EAAiBZ,EAAjBY,aACnC,OACI,0BAAMX,UAAU,sBACZ,yBAAKA,UAAU,cACX,sCACA,2BACIY,MAAOH,EACPI,SAAUH,EACVI,KAAK,YACLC,KAAK,OACLf,UAAU,eACVgB,YAAY,yBACZC,GAAG,UAEP,4BAAQF,KAAK,SACTG,QAAS,SAAAC,GACLA,EAAEC,iBACFT,KAEJX,UAAU,mBALd,a,iBCkHDqB,E,4MA3HXC,MAAQ,CACJC,UAAW,GACXC,kBAAmB,GACnBC,UAAW,MACXhB,OAAQ,GACRiB,MAAO,I,EAYXhB,kBAAoB,SAAAS,GAChBQ,QAAQC,IAAIT,EAAEU,OAAOjB,OACrBe,QAAQC,IAAI,EAAKN,MAAMb,QACA,KAAnBU,EAAEU,OAAOjB,MACT,EAAKkB,SAAS,CAAEN,kBAAmB,EAAKF,MAAMC,YAE9C,EAAKO,SAAS,CAAErB,OAAQU,EAAEU,OAAOjB,QAAS,WACtC,EAAKD,mB,EAKjBA,aAAe,SAAAQ,GACX,IAAIY,EACAjB,EAAO,EAAKQ,MAAMb,OAMtB,OALAsB,EAAM,EAAKT,MAAMC,UAAUS,QAAO,SAAUC,GAGxC,OADAnB,GADAA,EAAOA,EAAKoB,eACAC,OAAO,GAAGC,cAAgBtB,EAAKuB,MAAM,MACjCJ,EAASnB,KAAKwB,SAE3B,EAAKR,SAAS,CAAEN,kBAAmBO,K,EAG9CQ,SAAW,WACP,IAAIC,EACAC,EACyB,QAAzB,EAAKnB,MAAMG,WACXe,EAAY,EAAKlB,MAAMC,UAAUmB,MAAK,SAACC,EAAGC,GAAJ,OAClCD,EAAE7B,KAAK+B,KAAOD,EAAE9B,KAAK+B,KAAO,GAAK,KAErCJ,EAAQ,QAERD,EAAY,EAAKlB,MAAMC,UAAUmB,MAAK,SAACC,EAAGC,GAAJ,OAClCD,EAAE7B,KAAK+B,KAAOD,EAAE9B,KAAK+B,KAAO,GAAK,KAErCJ,EAAQ,OAEZ,EAAKX,SAAS,CAAEP,UAAWiB,EAAWf,UAAWgB,K,kEA9ChC,IAAD,OAChBK,IAAmBC,MAAK,SAAAC,GACpB,EAAKlB,SAAS,CACVP,UAAWyB,EAAUC,KAAKC,QAC1B1B,kBAAmBwB,EAAUC,KAAKC,e,+BA8C1C,OACI,6BACI,kBAAC,EAAD,CAAWC,MAAO,CAAEC,UAAW,QAC3B,kBAAC,EAAD,KACI,kBAAC,EAAD,CACIzC,aAAc0C,KAAK1C,aACnBD,kBAAmB2C,KAAK3C,kBACxBa,UAAW8B,KAAK/B,MAAMC,aAG9B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAKnB,KAAK,QACN,uCACA,8BAEJ,kBAAC,EAAD,CAAKA,KAAK,QACN,mCACS,IACL,4BAAQkD,QAASD,KAAKd,UAClB,uBAAGvC,UAAU,yBAIzB,kBAAC,EAAD,CAAKI,KAAK,QACN,4CACA,8BAEJ,kBAAC,EAAD,CAAKA,KAAK,QACN,qCACA,8BAEJ,kBAAC,EAAD,CAAKA,KAAK,QACN,mCACA,+BAGPiD,KAAK/B,MAAME,kBAAkBlB,KAAI,SAACiD,EAASC,GACxC,OACI,kBAAC,EAAD,CAAKC,IAAKD,GACN,kBAAC,EAAD,CAAKpD,KAAK,QACN,yBAAKsD,IAAKH,EAAQI,QAAQC,OACtBC,IAAI,sBAGZ,kBAAC,EAAD,CAAKzD,KAAK,QACLmD,EAAQzC,KAAK+B,KADlB,KAC0BU,EAAQzC,KAAKwB,OAEvC,kBAAC,EAAD,CAAKlC,KAAK,QACLmD,EAAQO,OAEb,kBAAC,EAAD,CAAK1D,KAAK,QACLmD,EAAQQ,OAEb,kBAAC,EAAD,CAAK3D,KAAK,QACL4D,IAAOT,EAAQU,IAAIC,KAAK7D,MAAM,KAAK,GAAI,aAAa8D,OAAO,gB,GAjH7EC,a,MCIJC,MATf,WACI,OACI,yBAAKrE,UAAU,UACX,kDACA,oH,MCAGsE,MAJf,SAAiBvE,GACb,OAAO,wCAAMC,UAAU,WAAcD,KCa1BwE,MAXf,WACE,OACI,6BACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,SCCUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7D,GACLC,QAAQD,MAAMA,EAAM8D,c","file":"static/js/main.a3940b94.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default {\n    getEmployees: function() {\n        return axios.get(\"https://randomuser.me/api/?results=200&nat=us\")\n    }\n}","import React from \"react\";\n\nfunction Container(props) {\n    return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />\n}\n\nexport default Container;","import React from \"react\";\n\nfunction Row(props) {\n    return <div className={`row${props.fluid ? \"-fluid\" : \"\"}`} {...props} />\n}\n\nexport default Row;","import React from \"react\";\n\nfunction Col(props) {\n    const size = props.size.split(\" \").map(size => \"col-\" + size).join(\" \");\n    return <div className={size} {...props} />\n}\n\nexport default Col;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Searchbar(props) {\n    const { search, handleInputChange, findEmployee } = props;\n    return (\n        <form className=\"search form-inline\">\n            <div className=\"form-group\">\n                <h2>Search</h2>\n                <input\n                    value={search}\n                    onChange={handleInputChange}\n                    name=\"Employees\"\n                    type=\"text\"\n                    className=\"form-control\"\n                    placeholder=\"Search for an employee\"\n                    id=\"index\"\n                />\n                <button type=\"submit\"\n                    onClick={e => {\n                        e.preventDefault();\n                        findEmployee()\n                    }}\n                    className=\"btn btn-primary\"\n                >\n                    Search\n            </button>\n            </div>\n        </form>\n    )\n}\n\nexport default Searchbar; ","import React, { Component } from \"react\";\nimport API from \"../utils/API\";\nimport Container from \"../components/Container\"\nimport Row from \"../components/Row\"\nimport Col from \"../components/Col\"\nimport Searchbar from \"../components/Searchbar\"\nimport moment from \"moment\";\n\nclass Home extends Component {\n    state = {\n        Employees: [],\n        filteredEmployees: [],\n        sortOrder: \"asc\",\n        search: \"\",\n        error: \"\"\n    }\n\n    componentDidMount() {\n        API.getEmployees().then(employees => {\n            this.setState({\n                Employees: employees.data.results,\n                filteredEmployees: employees.data.results\n            });\n        });\n    }\n\n    handleInputChange = e => {\n        console.log(e.target.value);\n        console.log(this.state.search);\n        if (e.target.value === \"\") {\n            this.setState({ filteredEmployees: this.state.Employees })\n        } else {\n            this.setState({ search: e.target.value }, () => {\n                this.findEmployee();\n            });\n        }\n    }\n\n    findEmployee = e => {\n        let emp;\n        let name = this.state.search;\n        emp = this.state.Employees.filter(function (employee) {\n            name = name.toLowerCase();\n            name = name.charAt(0).toUpperCase() + name.slice(1);\n            return name === employee.name.first;\n        });\n        return this.setState({ filteredEmployees: emp })\n    }\n\n    sortName = () => {\n        let nameOrder;\n        let order;\n        if (this.state.sortOrder === \"asc\") {\n            nameOrder = this.state.Employees.sort((a, b) =>\n                a.name.last > b.name.last ? 1 : -1\n            );\n            order = \"dsc\";\n        } else {\n            nameOrder = this.state.Employees.sort((a, b) =>\n                a.name.last < b.name.last ? 1 : -1\n            );\n            order = \"asc\";\n        }\n        this.setState({ Employees: nameOrder, sortOrder: order })\n    }\n\n    render() {\n        return (\n            <div>\n                <Container style={{ minHeight: \"80%\" }}>\n                    <Row>\n                        <Searchbar\n                            findEmployee={this.findEmployee}\n                            handleInputChange={this.handleInputChange}\n                            Employees={this.state.Employees}\n                        />\n                    </Row>\n                    <Row>\n                        <Col size=\"sm-2\">\n                            <h4>Picture</h4>\n                            <hr></hr>\n                        </Col>\n                        <Col size=\"sm-2\">\n                            <h4>\n                                Name{\" \"}\n                                <button onClikc={this.sortName}>\n                                    <i className=\"fas fa-sort fa-sx\" />\n                                </button>\n                            </h4>\n                        </Col>\n                        <Col size=\"sm-3\">\n                            <h4>Phone Number</h4>\n                            <hr></hr>\n                        </Col>\n                        <Col size=\"sm-3\">\n                            <h4>Email</h4>\n                            <hr></hr>\n                        </Col>\n                        <Col size=\"sm-2\">\n                            <h4>DOB</h4>\n                            <hr></hr>\n                        </Col>\n                    </Row>\n                    {this.state.filteredEmployees.map((thisEmp, index) => {\n                        return (\n                            <Row key={index}>\n                                <Col size=\"sm-2\">\n                                    <img src={thisEmp.picture.medium}\n                                        alt=\"employee-picture\"\n                                    />\n                                </Col>\n                                <Col size=\"sm-2\">\n                                    {thisEmp.name.last}, {thisEmp.name.first}\n                                </Col>\n                                <Col size=\"sm-2\">\n                                    {thisEmp.phone}\n                                </Col>\n                                <Col size=\"sm-3\">\n                                    {thisEmp.email}\n                                </Col>\n                                <Col size=\"sm-2\">\n                                    {moment(thisEmp.dob.date.split(\"T\")[0], \"YYY-MM-DD\").format(\"l\")}\n                                </Col>\n                            </Row>\n                        )\n                    })}\n                </Container>\n            </div>\n        )\n    }\n}\n\nexport default Home;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Header() {\n    return (\n        <div className=\"header\">\n            <h1>Employee Directory</h1>\n            <p>Click on carrots to filter by heading or use the search box to narrow your results.</p>\n        </div>\n    )\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n    return <main className=\"wrapper\" {...props} />\n}\n\nexport default Wrapper;","import React from 'react';\nimport Home from \"./pages/Home\";\nimport Header from \"./components/Header\";\nimport Wrapper from \"./components/Wrapper\";\n\n\nfunction App() {\n  return (\n      <div>\n        <Wrapper>\n          <Header />\n          <Home />\n        </Wrapper>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}